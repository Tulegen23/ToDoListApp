import SwiftUI

struct TaskDetailView: View {
    let task: ToDoTask
    @StateObject private var viewModel = TaskListViewModel()
    @State private var isCompleted: Bool

    init(task: ToDoTask) {
        self.task = task
        _isCompleted = State(initialValue: task.isCompleted)
    }

    var body: some View {
        ScrollView {
            VStack(alignment: .leading, spacing: 20) {
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                Text(task.title)
                    .font(.system(size: 32, weight: .bold))
                    .foregroundColor(.primary)
                    .padding(.bottom, 10)

                // –û–ø–∏—Å–∞–Ω–∏–µ
                VStack(alignment: .leading, spacing: 10) {
                    Label("–û–ø–∏—Å–∞–Ω–∏–µ", systemImage: "doc.text")
                        .font(.headline)
                        .foregroundColor(.gray)
                    Text(task.description)
                        .font(.body)
                        .foregroundColor(.secondary)
                        .padding()
                        .background(Color.white)
                        .cornerRadius(10)
                        .shadow(radius: 2)
                }

                // –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                VStack(alignment: .leading, spacing: 10) {
                    Label("–°—Ä–æ–∫", systemImage: "calendar")
                        .font(.headline)
                        .foregroundColor(.gray)
                    Text("\(task.dueDate, formatter: dateFormatter)")
                        .font(.subheadline)
                        .foregroundColor(.blue)
                        .padding(.horizontal)
                        .padding(.vertical, 6)
                        .background(Color.blue.opacity(0.1))
                        .cornerRadius(8)
                }

                // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                Toggle(isOn: $isCompleted) {
                    Label("–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏", systemImage: isCompleted ? "checkmark.circle.fill" : "clock.fill")
                        .foregroundColor(isCompleted ? .green : .orange)
                }
                .onChange(of: isCompleted) { newValue in
                    Task {
                        let updatedTask = ToDoTask(
                            id: task.id,
                            title: task.title,
                            description: task.description,
                            dueDate: task.dueDate,
                            isCompleted: newValue
                        )
                        await viewModel.updateTask(updatedTask)
                    }
                }
                .padding()
                .background(Color.white)
                .cornerRadius(10)
                .shadow(radius: 2)

                // AR –∫–Ω–æ–ø–∫–∞
                NavigationLink(destination: ARTaskView(task: task)) {
                    HStack {
                        Image(systemName: "arkit")
                        Text("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ AR")
                            .fontWeight(.semibold)
                    }
                    .frame(maxWidth: .infinity)
                    .padding()
                    .background(LinearGradient(colors: [.blue, .purple], startPoint: .leading, endPoint: .trailing))
                    .foregroundColor(.white)
                    .cornerRadius(12)
                    .shadow(radius: 4)
                }

                Spacer()
            }
            .padding()
        }
        .navigationTitle("üìù –î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏")
        .navigationBarTitleDisplayMode(.inline)
        .background(
            LinearGradient(gradient: Gradient(colors: [.white, .blue.opacity(0.05)]), startPoint: .top, endPoint: .bottom)
                .edgesIgnoringSafeArea(.all)
        )
    }
}

private let dateFormatter: DateFormatter = {
    let formatter = DateFormatter()
    formatter.dateStyle = .medium
    return formatter
}()

struct TaskDetailView_Previews: PreviewProvider {
    static var previews: some View {
        TaskDetailView(
            task: ToDoTask(
                id: "1",
                title: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
                description: "–°–¥–µ–ª–∞—Ç—å UI –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫—Ä—É—Ç—ã–º.",
                dueDate: Date(),
                isCompleted: false
            )
        )
    }
}
